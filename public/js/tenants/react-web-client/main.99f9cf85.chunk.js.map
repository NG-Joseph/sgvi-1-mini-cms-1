{"version":3,"sources":["app.interfaces.tsx","reducers/app.reducer.tsx","tenant-crud-handlers/create.tsx","tenant-crud-handlers/delete.tsx","tenant-crud-handlers/update.tsx","tenant-crud-handlers/read.tsx","components/Alert.tsx","components/Tenant.tsx","components/TenantListHeader.tsx","components/TenantList.tsx","components/AddTenant.tsx","components/EditTenant.tsx","components/ViewTenant.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TenantStatus","Gender","TenantTeamRole","TenantAccountOfficerRole","reducer","state","action","type","tenants","payload","tenantsCount","alert","show","message","error","onViewTenant","onAddTenant","onEditTenant","tenant","currentTenants","push","newTenantsCount","index","findIndex","id","splice","handleCreateTenant","tenantToCreate","createPrimaryContact","dispatch","a","fetch","method","headers","body","JSON","stringify","response","ok","Error","statusText","json","tenantCreated","handleDeleteTenant","handleUpdateTenant","editedTenant","handleReadTenants","findOptions","encodeURI","data","Alert","onClickHandler","color","onClick","remove","Tenant","appContext","useContext","AppContext","uniqueName","primaryContact","firstName","lastName","primaryEmailAddress","status","className","window","confirm","TenantListHeader","TenantList","props","tenantListRows","map","key","AddTenant","initialState","address","moreInfo","undefined","customURLSlug","dateOfRegistration","Date","active","uniqueSchema","useState","setState","onChange","event","target","name","value","onPrimaryContactChange","onSubmit","preventDefault","placeholder","required","rows","A","O","S","pattern","max","toLocaleString","checked","maxLength","passwordHash","middleName","commonName","homeAddress","gender","F","M","dateOfBirth","nationality","stateOfOrigin","zip","EditTenant","initialTenantState","teamMembers","tenantAccountOfficers","connectionResource","customTheme","setTenant","tenantState","forEach","teamMember","user","roles","toString","tenantAccountOfficer","toLocaleDateString","length","ViewTenant","upload","fileToUpload","uploadButtonState","logo","src","FormData","append","now","aria-label","files","React","createContext","App","useReducer","useEffect","myAlert","Provider","Boolean","location","hostname","match","initialData","document","getElementById","getAttribute","initialProps","parse","decodeURI","ReactDOM","hydrate","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.99f9cf85.chunk.js","sourcesContent":["/**\n * Abstract base type for entities\n */\nexport interface IBaseAbstract {\n    id?: number;\n    dateCreated?: Date;\n    createdBy?: string;\n    dateLastModified?: Date;\n    lastModifiedBy?: string;\n    lastChangeInfo?: string;\n    deletedBy?: string;\n}\n/**\n * CustomTheme type\n */\nexport interface ICustomTheme extends IBaseAbstract {\n    name?: string;\n    description?: string;\n    properties?: string;\n    bulmaProperties?: { primaryColor: string, primaryBackground: string };\n}\n\nexport enum TenantStatus {\n    A = \"active\",\n    S = \"suspended\",\n    O = \"owing\"\n}\n\nexport enum Gender {\n    M = \"male\",\n    F = \"female\"\n}\n\nexport enum TenantTeamRole {\n    A = \"admin\",\n    M = \"marketing\",\n    C = \"content-manager\"\n}\n\nexport enum TenantAccountOfficerRole {\n    M = \"manager\",\n    T = \"tech-support\"\n}\n\nexport interface IUser extends IBaseAbstract {\n    landlord?: boolean;\n    firstName?: string;\n    middleName?: string;\n    lastName?: string;\n    commonName?: string;\n    homeAddress?: string;\n    gender?: Gender;\n    dateOfBirth?: Date;\n    nationality?: string;\n    stateOfOrigin?: string;\n    zip?: string;\n    photo?: string;\n    photoMimeType?: string;\n    isActive?: boolean;\n    primaryEmailAddress?: string;\n    backupEmailAddress?: string;\n    phone?: { mobile?: string[], office?: string[], home?: string[] }\n    isPrimaryEmailAddressVerified?: boolean;\n    isBackupEmailAddressVerified?: boolean;\n    passwordSalt?: string;\n    passwordHash?: string;\n    isPasswordChangeRequired?: boolean;\n    resetPasswordToken?: string;\n    resetPasswordExpiration?: Date;\n    primaryEmailVerificationToken?: string;\n    backupEmailVerificationToken?: string;\n    emailVerificationTokenExpiration?: Date;\n    otpEnabled?: boolean\n    otpSecret?: string;\n    roles?: IRole[];\n    primaryContactForWhichTenants?: ITenant[];\n    tenantTeamMemberships?: ITenantTeam[];\n    accountOfficerForWhichTenants?: ITenantAccountOfficer[];\n\n}\n\nexport interface IRole extends IBaseAbstract {\n    name?: string;\n    description?: string;\n    users?: IUser[];\n    landlord?: boolean; //Is this a role that is unique to landlords\n}\n\nexport interface ITenantTeam extends IBaseAbstract {\n    tenant?: ITenant\n    user?: IUser\n    roles?: TenantTeamRole[]\n}\n\nexport interface ITenantAccountOfficer extends IBaseAbstract{ \n    tenant?: ITenant\n    user?: IUser\n    roles?: TenantAccountOfficerRole[]\n}\n\nexport interface ITheme extends IBaseAbstract{\n    name?: string;\n    description?: string;\n    properties?: string;\n    tenants?: ITenant[];\n}\n\nexport interface IBilling extends IBaseAbstract{\n    uuid?: string;\n    code?: string;\n    description?: string;\n    type?: string;\n    tenant?: ITenant;\n}\n\nexport interface IConnectionResource extends IBaseAbstract{\n    uuid?: string;\n    name?: string\n    description?: string\n    active?: boolean\n    platform?: string\n    connectionProperties?: {\n        type: string,\n        host: string,\n        port: string,\n        username: string,\n        password: string,\n        database: string,\n        schema: string\n      }; \n    rootFileSystem?: string;\n    tenant?: ITenant;\n}\n\n/**\n * Tenant type\n */\nexport interface ITenant extends IBaseAbstract {\n    uuid?: string;\n    uniqueName?: string;\n    address?: string;\n    moreInfo?: string;\n    logo?: string;\n    logoMimeType?: string;\n    status?: TenantStatus;\n    customURLSlug?: string | null\n    dateOfRegistration?: Date\n    active?: boolean;\n    customTheme?: ICustomTheme;\n    primaryContact?: IUser;\n    teamMembers?: ITenantTeam[];\n    tenantAccountOfficers?: ITenantAccountOfficer[];\n    uniqueSchema?: boolean;\n    themes?: ITheme[];\n    billings?: IBilling[];\n    connectionResource?: IConnectionResource;\n    [key: string]: any\n}\n\n/**\n * State variable type\n */\nexport interface IState {\n    tenants?: ITenant[];\n    tenantsCount?: number; //for total number that corresponds to present find, in case of pagination\n    tenant?: ITenant | null; //This can be use for tenant to edit or tenant to view, depending on the function being carried out\n    onAddTenant: boolean;\n    onViewTenant: boolean;\n    onEditTenant: boolean;\n    alert: {\n        show: boolean,\n        message: string,\n        type: any //problem making string compatible with type '\"info\" | \"success\" | \"link\" |\n    }\n}\n\n/**\n * Action type for Reducer\n */\nexport interface IAction {\n    //Indicate possible reducer action types here as you identify them in your codes\n    type: 'FetchDataSuccess' | 'FetchDataFailure' | 'HandleOnAddTenant'\n    | 'HandleCancelCreate' | 'BeforeCreateTenant' | 'CreateTenantSuccess'\n    | 'CreateTenantFailure' | 'BeforeDeleteTenant' | 'DeleteTenantSuccess'\n    | 'DeleteTenantFailure' | 'HandleEditTenant' | 'HandleCancelUpdate'\n    | 'BeforeUpdateTenant' | 'UpdateTenantSuccess' | 'UpdateTenantFailure'\n    | 'HandleCloseAlert' | 'HandleViewTenant' | 'HandleCloseViewTenant';\n    payload?: {\n        tenants?: ITenant[], tenantsCount?: number, tenant?: ITenant, error?: Error,\n        id?: number | string\n    }\n\n}\n\n/*\nThe idea below is to provide room for specifying read\nhttps://github.com/typeorm/typeorm/blob/master/docs/find-options.md\n*/\nexport interface IFindOptions {\n    select?: string[];\n    relations?: string[];\n    skip?: number;\n    take?: number;\n    cache?: boolean;\n    where?: {}[] | {};\n    order?: {};\n\n}\n","import { IState, IAction } from '../app.interfaces';\n\nconst reducer = (state: IState, action: IAction) => {\n    switch (action.type) {\n        case 'FetchDataSuccess':\n            return {\n                ...state, tenants: action.payload!.tenants, tenantsCount: action.payload!.tenantsCount\n            };\n        case 'FetchDataFailure':\n            return {\n                ...state, alert: { show: true, type: \"danger\", message: `Could not load remote data: ${action.payload!.error}` }\n            };\n        case 'HandleViewTenant':\n            return {\n                ...state, onViewTenant: true, onAddTenant: false, onEditTenant: false, tenant: action.payload!.tenant\n            };\n        case 'HandleCloseViewTenant':\n            return{\n                ...state, onViewTenant: false, tenant: null\n            }\n        case 'HandleOnAddTenant':\n            return {\n                ...state, onAddTenant: true, onEditTenant: false, alert: {...state.alert, show: false}\n            };\n        case 'HandleCancelCreate':\n            return {\n                ...state, onAddTenant: false\n            };\n        case 'BeforeCreateTenant':\n            //goal here is to set alert to show creating tenant message\n            return {\n                ...state, alert: { show: true, type: \"info\", message: 'Creating tenant. Please wait!' }\n            };\n        case 'CreateTenantSuccess': {\n            //goal here is to update state with tenant created\n            const currentTenants = state.tenants!;\n            currentTenants.push(action.payload!.tenant!);\n            const newTenantsCount = state.tenantsCount!++;\n            return {\n                ...state, tenants: currentTenants, tenantsCount: newTenantsCount, onAddTenant: false, alert: { show: true, type: \"success\", message: 'Tenant successfully created!' }\n            };\n        };\n        case 'CreateTenantFailure':\n            //goal here is to set alert to show failure to create\n            return {\n                ...state, alert: { show: true, type: \"danger\", message: `Could not create tenant: ${action.payload!.error}` }\n            };\n        case 'BeforeDeleteTenant':\n            //goal here is to set alert to show creating tenant message\n            return { \n                ...state, alert: { show: true, type: \"info\", message: 'Deleting tenant. Please wait!' } \n            };\n        case 'DeleteTenantSuccess': {\n            //goal here is to remove deleted tenant from state\n            const currentTenants = state.tenants;\n            //find the index corresponding to the tenant with the passed id\n            const index = currentTenants!.findIndex((tenant) => tenant.id === action.payload!.id);\n            currentTenants!.splice(index, 1);\n            const newTenantsCount = state.tenantsCount!-- \n            return { \n                ...state, onViewTenant: false, tenants: currentTenants, tenantsCount: newTenantsCount, alert: { show: true, type: \"success\", message: 'Tenant successfully deleted!' } \n            };\n        };\n        case 'DeleteTenantFailure':\n            //goal here is to set alert to show failure to delete\n            return { \n                ...state, onViewTenant: false, alert: { show: true, type: \"danger\", message: `Could not delete tenant: ${action.payload!.error}` } \n            };\n        case 'BeforeUpdateTenant':\n            //goal here is to set alert to show updating tenant message\n            return { \n                ...state, alert: { show: true, type: \"info\", message: 'Updating tenant. Please wait!' } \n            };\n        case 'HandleCancelUpdate':\n            return { \n                ...state, onEditTenant: false \n            };\n        case 'HandleEditTenant': {\n            //alert(JSON.stringify(action.payload!.tenant))\n            //goal here is to find the tenant to be edited and set the tenant in state to be edited\n            const currentTenants = state.tenants;\n            \n            const index = currentTenants!.findIndex((tenant) => tenant.id === action.payload!.id);\n            const tenant = currentTenants![index];\n            return { \n                ...state, onEditTenant: true, tenant: tenant, onAddTenant: false, alert: {...state.alert, show: false} \n            };\n        };\n        case 'UpdateTenantSuccess': {\n            //goal here is to update state with tenant updated\n            const currentTenants = state.tenants;\n            const index = currentTenants!.findIndex((tenant) => tenant.id === action.payload!.tenant!.id);\n            //now change the value for that tenant in state\n            currentTenants![index] = action.payload!.tenant!;\n            return { \n                ...state, onViewTenant: false, tenants: currentTenants, tenant: action.payload!.tenant!, onEditTenant: false, alert: { show: true, type: \"success\", message: 'Tenant successfully updated!' } \n            };\n        };\n        case 'UpdateTenantFailure':\n            //goal here is to set alert to show failure to update\n            return { \n                ...state, onViewTenant: false, alert: { show: true, type: \"danger\", message: `Could not update tenant: ${action.payload!.error}` } \n            };\n        case 'HandleCloseAlert':\n            return { \n                ...state, alert: { show: false, message: '', type: '' } \n            };\n            \n        default:\n            return state; //return state as is if the action type indicated is not handled\n    }//close switch statement\n\n}\nexport default reducer;","import { IAction, ITenant } from \"../app.interfaces\";\n\n//function that handles Create Tenant\nexport const handleCreateTenant = async (tenantToCreate: ITenant, createPrimaryContact: boolean, dispatch: React.Dispatch<IAction>) => {\n    //dispatch to state reducer, specifying the action type. Just a message that says 'Creating tenant ...'\n    dispatch({ type: 'BeforeCreateTenant' });\n    //let's try to write to backend\n    try {\n        //I have left a number of init options commented out rather than not have then at, so you can know about them\n        //see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for info on these options\n        const response = await fetch(`/v1/tenants?createPrimaryContact=${createPrimaryContact}`,\n            {\n                method: 'POST',\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(tenantToCreate) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n        //Response is ok. Proceed!\n        const tenantCreated: ITenant = await response.json();\n\n        //useReducer to dispatch successful tenant creation, sending tenantCreated as payload.\n        dispatch({ type: 'CreateTenantSuccess', payload: { tenant: tenantCreated } });\n    } catch (error) {\n        //dispatch error to state for display\n        dispatch({ type: 'CreateTenantFailure', payload: { error: error } });\n    }\n}","import { IAction } from \"../app.interfaces\";\n\nexport const handleDeleteTenant = async (id: number | string, dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    dispatch({ type: 'BeforeDeleteTenant' });\n    try {\n        const response = await fetch(`/v1/tenants/${id}`, //note this URL\n            {\n                method: 'DELETE',\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed!\n        //remove tenant from state\n        dispatch({ type: 'DeleteTenantSuccess', payload: { id: id } })\n    } catch (error) {\n        //problem deleting from backend\n        dispatch({ type: 'DeleteTenantFailure', payload: { error: error } })\n    }\n}\n","import { IAction, ITenant } from \"../app.interfaces\";\n\n\nexport const handleUpdateTenant = async (editedTenant: ITenant, dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    //Of course, this alert will only flash if it takes very minimal time to create item\n    dispatch({ type: 'BeforeUpdateTenant' })\n    //let's try to write to backend\n    try {\n        const response = await fetch(`/v1/tenants`,\n            {\n                method: 'PUT',//notice the method\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(editedTenant) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed with setting state with itemUpdated\n        //partial update does not return full object, hence I am not using below to get tenant updated\n        //const tenantUpdated = await response.json();\n        \n        await response.json();\n        //dispatch to state\n        dispatch({ type: 'UpdateTenantSuccess', payload: { tenant: editedTenant } })\n    } catch (error) {\n        alert('error zone')\n        dispatch({ type: 'UpdateTenantFailure', payload: { error: error } })\n    }\n\n}","import { IAction, IFindOptions } from \"../app.interfaces\";\n\n//function to fetch data\n//See https://github.com/typeorm/typeorm/blob/master/docs/find-options.md for find options\n//findOptions defaults to empty {}\nexport const handleReadTenants = async (dispatch: React.Dispatch<IAction>, findOptions: IFindOptions = {}) => {\n    try {\n      //Rather than use absolute URL, we are using relative below because we have made a proxy entry into package.json\n      //i.e. \"proxy\": \"http://localhost:3003\". In this way, our code is more like how it will be at production deployment\n      //when we serve both the client react application and the backend from the same domain.\n      const response = await fetch(`/v1/tenants?findOptions=${encodeURI(JSON.stringify(findOptions))}`);\n\n      //const response = await fetch(`/v1/tenants`);\n      \n      if (!response.ok) throw new Error(response.statusText);\n\n      const data = await response.json();\n      \n      //set in state  \n      dispatch({type: 'FetchDataSuccess', payload: {tenantsCount: data[1], tenants: data[0]}})\n    } catch (error) {\n      //set state\n      //alert(error)\n      //alert(error)\n      dispatch({type: 'FetchDataFailure', payload: {error: error}})\n    }\n  };\n","import React from 'react';\nimport { Notification, Button } from 'react-bulma-components';\n\ntype Props = {\n    message: string,\n    type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n    onClickHandler: ()=>void\n    \n}\n\nconst Alert: React.FC<Props> = ({message, type, onClickHandler}) => {\n    //For bulma notification documentation see https://bulma.io/documentation/elements/notification/\n    return(\n        <Notification color={type} onClick={onClickHandler}>\n          {message}\n            <Button remove />\n        </Notification>\n    )\n}\n\nexport default Alert","/** This component is for displaying each item in the record, passed to it from TenantList */\nimport React, { useContext } from 'react';\nimport { ITenant } from '../app.interfaces';\nimport { AppContext } from '../App';\n\ntype Props = {\n    tenant: ITenant,\n}\n\nconst Tenant: React.FC<Props> = ({tenant}) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteTenant = () => {\n        appContext!.handleDeleteTenant!(tenant.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditTenant = () => {\n        //appContext!.handleEditTenant!(tenant.id, appContext!.dispatch); //notice here that we are invoking the handleEditTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditTenant', payload: {id: tenant.id} });\n    };\n\n    const onViewTenant = () => {\n        appContext!.dispatch({type: 'HandleViewTenant', payload: {tenant}})\n    }\n\n    return (\n        <tr>\n            <td>{tenant.uniqueName}</td>\n            <td>{tenant.primaryContact?.firstName}</td>\n            <td>{tenant.primaryContact?.lastName}</td>\n            <td>{tenant.primaryContact?.primaryEmailAddress}</td>\n            <td>{tenant.status}</td>\n            <td>\n                \n                <div className=\"buttons are-small\">\n                    <button className=\"button is-link\" onClick={onViewTenant}>View Detail</button>\n                    <button className=\"button is-warning\" onClick={onEditTenant}>Edit</button>\n                    <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteTenant() }}>Delete</button>\n                </div>\n                \n            </td>\n            \n        </tr>\n    );\n}\n\nexport default Tenant;\n","/** Table header. We are separating this from TenantList just in case it has to carry out\n * some specific tasks like firing sort event based on the header column clicked.\n*/\nimport React from 'react';\n\n\nconst TenantListHeader: React.FC = () => {\n\n  return (\n    <thead>\n      <tr>\n          <th>Unique Name</th>\n          <th>Contact First Name</th>\n          <th>Contact Last Name</th>\n          <th>Contact Email</th>\n          <th>Status</th>\n          <th>Action</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default TenantListHeader;\n","import React from 'react';\nimport { ITenant } from '../app.interfaces';\nimport Tenant from './Tenant';\nimport TenantListHeader from './TenantListHeader';\n\n\n//declare type for Props passed to this \ntype Props = {\n    tenants: ITenant[],\n}\n\nconst TenantList: React.FC<Props> = (props) => {\n\n    //prepare tenants for display in a table\n    let tenantListRows:any = null;\n    \n    tenantListRows = props.tenants.map((tenant) => {\n        return <Tenant tenant={tenant} key={tenant.id}/>\n    })\n    \n\n    return (\n        <table className=\"table is-striped is-narrow is-hoverable\" >\n            <caption><h3>Available tenants</h3></caption>\n            <TenantListHeader />\n            <tbody>\n                {tenantListRows}\n            </tbody>\n        </table>\n    );\n}\n\nexport default TenantList;\n","/** This component is for displaying each tenant in the record, passed to it from TenantList */\nimport React, { useState } from 'react';\nimport { Gender, IAction, ITenant, TenantStatus } from '../app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    handleCreateTenant: Function,\n    dispatch: React.Dispatch<IAction>\n}\n\ntype IState = {\n    tenant: ITenant,\n    createPrimaryContact: boolean\n}\n\nconst AddTenant: React.FC<Props> = (props) => {\n\n    const initialTenantState: ITenant = {\n        uniqueName: '',\n        address: '',\n        moreInfo: '',\n        status: undefined,\n        customURLSlug: null,\n        dateOfRegistration: new Date(),\n        active: true,\n        uniqueSchema: true,\n        primaryContact: {},\n        /* As we did for primaryContact, we can also do for the other relations\n        connectionResource: {},\n        customTheme: {},\n        teamMembers: [],\n        tenantAccountOfficers: []\n        */\n    }\n\n    const initialState: IState = {\n        tenant: initialTenantState,\n        createPrimaryContact: true\n    }\n\n    //declare the state variable for tenant to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [state, setState] = useState<IState>({ ...initialState });\n\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const tenant = state.tenant;//check out tenant in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        tenant[target.name] = target.value;\n        setState({ ...state, tenant });//checkin the modified tenant state\n    }\n    const onPrimaryContactChange = (event: React.FormEvent) => {\n        const tenant = state.tenant;//check out tenant in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        //tenantState[target.name] = target.value;\n        tenant['primaryContact']![target.name] = target.value;\n        setState({ ...state, tenant });//checkin the modified state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        props.handleCreateTenant(state.tenant, state.createPrimaryContact? 1 : 0, props.dispatch);//call the handleAddTenant function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //dispatch to state\n        props.dispatch({ type: 'HandleCancelCreate' })\n    }\n\n    const handlePrimaryContactChoice = () => {\n        //toggle choice in state\n        const createPrimaryContact = state.createPrimaryContact? false : true\n        setState({...state, createPrimaryContact })\n    }\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <form onSubmit={onSubmit}>\n            <div className=\"box\">\n                <div className=\"columns is-mobile\">\n                    <h2>Add Tenant</h2>\n                </div>\n                <div className=\"columns is-mobile\">\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Unique Name</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Unique name input\" name=\"uniqueName\" value={state.tenant.uniqueName} onChange={onChange} required />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Address</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Address input\" name=\"address\" value={state.tenant.address} onChange={onChange} required />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">More Information</label>\n                                <div className=\"control\">\n                                    <textarea className=\"input\" placeholder=\"More information input\" rows={10} name=\"moreInfo\" value={state.tenant.moreInfo} onChange={onChange} />\n                                </div>\n                            </div>\n                            <div className=\"select\">\n                                <select name=\"status\" onChange={onChange} value={state.tenant.status}>\n                                    <option value=\"notSelected\">Select tenant status</option>\n                                    <option value={TenantStatus.A}>Active</option>\n                                    <option value={TenantStatus.O}>Owing</option>\n                                    <option value={TenantStatus.S}>Suspended</option>\n                                </select>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Date of Registration</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max=\"{{todaysDate}}\" placeholder=\"Date of registration\" name=\"dateOfRegistration\" value={state.tenant.dateOfRegistration?.toLocaleString()} onChange={onChange} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <h4> Set Primary Contact</h4>\n                            <div className=\"field\">\n                                <div className=\"control\">\n                                    <span><input type=\"checkbox\" name=\"addPrimaryContact\" value=\"\" checked={state.createPrimaryContact}  onChange={handlePrimaryContactChoice} />&nbsp;Create?</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        {\n                            !state.createPrimaryContact &&\n                            <div className=\"box\">\n                                <div className=\"field\">\n                                    <label className=\"label\">Primary Email Address of Contact</label>\n                                    <div className=\"control\">\n                                        <input name=\"primaryEmailAddress\" className=\"input\" type=\"email\" placeholder=\"Enter valid email here\" maxLength={30} value={state.tenant.primaryContact!.primaryEmailAddress} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n\n                        {state.createPrimaryContact &&\n                            <div id=\"addPrimaryContactBox\" className=\"box\">\n                                <h5>Create Primary Contact</h5>\n                                <div className=\"field\">\n                                    <label className=\"label\">Primary Email Address</label>\n                                    <div className=\"control\">\n                                        <input name=\"primaryEmailAddress\" className=\"input\" type=\"email\" placeholder=\"Enter valid email here\" maxLength={30} value={state.tenant.primaryContact!.primaryEmailAddress} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The email address should not be more than 30 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Password</label>\n                                    <div className=\"control\">\n                                        <input name=\"passwordHash\" className=\"input\" type=\"password\" placeholder=\"Enter password here\" maxLength={128} value={state.tenant.primaryContact!.passwordHash} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The password should not be more than 128 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">First Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"firstName\" className=\"input\" type=\"text\" placeholder=\"Enter first name here\" maxLength={30} value={state.tenant.primaryContact!.firstName} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The first name should not be more than 30 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Last Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"lastName\" className=\"input\" type=\"text\" placeholder=\"Enter last name here\" maxLength={30} value={state.tenant.primaryContact!.lastName} onChange={onPrimaryContactChange} required />\n                                    </div>\n                                    <p className=\"help\">The last name should not be more than 30 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Middle Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"middleName\" className=\"input\" type=\"text\" placeholder=\"Enter middle name here\" maxLength={30} value={state.tenant.primaryContact!.middleName} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">Even though optional, it is advisable to enter middle name</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Common Name</label>\n                                    <div className=\"control\">\n                                        <input name=\"commonName\" className=\"input\" type=\"text\" placeholder=\"Enter common name here\" maxLength={20} value={state.tenant.primaryContact!.commonName} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">What is the user commonly called. The common name should not be more than 20 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Home Address</label>\n                                    <div className=\"control\">\n                                        <textarea name=\"homeAddress\" className=\"input\" rows={6} placeholder=\"Enter home address here\" maxLength={100} value={state.tenant.primaryContact!.homeAddress} onChange={onPrimaryContactChange}></textarea>\n                                    </div>\n                                    <p className=\"help\">The home address should not be more than 100 letters</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Gender</label>\n                                    <div className=\"control\">\n                                        <div className=\"select\">\n                                            <select name=\"gender\" value={state.tenant.primaryContact!.gender} onChange={onPrimaryContactChange}>\n                                                <option value=\"notSelected\">Select Gender</option>\n                                                <option value={Gender.F}>Female</option>\n                                                <option value={Gender.M}>Male</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <p className=\"help\">Select the Gender</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Date of Birth</label>\n                                    <div className=\"control\">\n                                        <input name=\"dateOfBirth\" id=\"dateOfBirth\" className=\"input\" type=\"date\"\n                                            required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max={new Date().toLocaleString()} value={state.tenant.primaryContact!.dateOfBirth?.toLocaleString()} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The date of birth of the user. Pattern of entry is YYYY-MM-DD</p>\n                                </div>\n                                <div className=\"field\">\n                                    <label className=\"label\">Nationality</label>\n                                    <div className=\"control\">\n                                        <input name=\"nationality\" className=\"input\" type=\"text\" placeholder=\"Enter nationality here\" maxLength={30} value={state.tenant.primaryContact!.nationality} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The nationality should not be more than 30 letters</p>\n                                </div>\n\n                                <div className=\"field\">\n                                    <label className=\"label\">State</label>\n                                    <div className=\"control\">\n                                        <input name=\"stateOfOrigin\" className=\"input\" type=\"text\" placeholder=\"Enter state here\" maxLength={30} value={state.tenant.primaryContact!.stateOfOrigin} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The state should not be more than 30 letters</p>\n                                </div>\n\n                                <div className=\"field\">\n                                    <label className=\"label\">Zip code</label>\n                                    <div className=\"control\">\n                                        <input name=\"zip\" className=\"input\" type=\"text\" placeholder=\"Enter zip code here\" maxLength={6} value={state.tenant.primaryContact!.zip} onChange={onPrimaryContactChange} />\n                                    </div>\n                                    <p className=\"help\">The zip code should not be more than 6 letters</p>\n                                </div>\n\n                            </div>}\n\n                    </div>\n\n                </div>\n                <div className=\"columns is-mobile\">\n                    <div className=\"field is-grouped\">\n                        <div className=\"control\">\n                            <button className=\"button is-link\">Submit</button>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n\n    );\n}\n\nexport default AddTenant;\n","/** This component is for displaying each tenant in the record, passed to it from TenantList */\nimport React, { useState } from 'react';\nimport { Gender, IAction, ITenant, TenantStatus } from '../app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    tenant: ITenant,\n    handleUpdateTenant: Function,\n    dispatch: React.Dispatch<IAction>\n}\n\nconst EditTenant: React.FC<Props> = (props) => {\n\n    const initialTenantState: ITenant = {\n        id: props.tenant.id,\n        uniqueName: props.tenant.uniqueName,\n        address: props.tenant.address,\n        moreInfo: props.tenant.moreInfo,\n        status: props.tenant.status,\n        customURLSlug: props.tenant.customURLSlug,\n        dateOfRegistration: props.tenant.dateOfRegistration,\n        active: props.tenant.active,\n        uniqueSchema: props.tenant.uniqueSchema,\n        primaryContact: props.tenant.primaryContact,\n        teamMembers: props.tenant.teamMembers,\n        tenantAccountOfficers: props.tenant.tenantAccountOfficers,\n        connectionResource: props.tenant.connectionResource,\n        customTheme: props.tenant.customTheme,\n    }\n\n    //declare the state variable for tenant to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [tenant, setTenant] = useState<ITenant>({ ...initialTenantState });\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const tenantState = tenant;//check out tenant in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        tenantState[target.name] = target.value;\n        setTenant({ ...tenantState });//checkin the modified state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        props.handleUpdateTenant(tenant, props.dispatch);//call the handleAddTenant function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //props.handleCancelUpdate(props.dispatch);//call the function handleCancelAdd passed via props\n        //simply set state to make displayUpdate disappear\n        props.dispatch({ type: 'HandleCancelUpdate' });\n    }\n\n    //prepare team members to show (one to many)\n    const teamMembers: any =\n        tenant.teamMembers!.forEach((teamMember, index) => {\n            return (\n                <div className=\"columns\">\n                    <tr>\n                        <td>{index}</td>\n                        <td>{teamMember.user!.primaryEmailAddress}</td>\n                        <td>{teamMember.user!.firstName}</td>\n                        <td>{teamMember.user!.lastName}</td>\n                        <td>{teamMember.user!.primaryEmailAddress}</td>\n                        <td>{teamMember.roles!.toString()}</td>\n                        <td>\n                            <div className=\"buttons are-small\">\n                                <button className=\"button is-link\" onClick={() => { alert('Yet to be implemented'); return false }}>View Detail</button>\n                                <button className=\"button is-warning\" onClick={() => { alert('Yet to be implemented'); return false }}>Edit</button>\n                                <button className=\"button is-danger\" onClick={() => { alert('Yet to be implemented'); return false }}>Delete</button>\n                            </div>\n\n                        </td>\n                    </tr>\n                </div>\n            )\n        })\n\n    //prepare team members to show (one to many)\n    const tenantAccountOfficers: any =\n        tenant.tenantAccountOfficers!.forEach((tenantAccountOfficer, index) => {\n            return (\n                <div className=\"columns\">\n                    <tr>\n                        <td>{index}</td>\n                        <td>{tenantAccountOfficer.user!.primaryEmailAddress}</td>\n                        <td>{tenantAccountOfficer.user!.firstName}</td>\n                        <td>{tenantAccountOfficer.user!.lastName}</td>\n                        <td>{tenantAccountOfficer.user!.primaryEmailAddress}</td>\n                        <td>{tenantAccountOfficer.roles!.toString()}</td>\n                        <td>\n                            <div className=\"buttons are-small\">\n                                <button className=\"button is-link\" onClick={() => { alert('Yet to be implemented'); return false }}>View Detail</button>\n                                <button className=\"button is-warning\" onClick={() => { alert('Yet to be implemented'); return false }}>Edit</button>\n                                <button className=\"button is-danger\" onClick={() => { alert('Yet to be implemented'); return false }}>Delete</button>\n                            </div>\n\n                        </td>\n                    </tr>\n                </div>\n            )\n        })\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <div className=\"columns is-mobile\">\n            <div className=\"column\">\n                <form onSubmit={onSubmit}>\n                    <div className=\"box\">\n                        <div className=\"columns is-mobile\">\n                            <h2>Edit Tenant</h2>\n                        </div>\n                        <div className=\"columns is-mobile\">\n                            <div className=\"column\">\n                                <div className=\"box\">\n                                    <div className=\"field\">\n                                        <label className=\"label\">Unique Name</label>\n                                        <div className=\"control\">\n                                            <input className=\"input\" type=\"text\" placeholder=\"Unique name input\" name=\"uniqueName\" value={tenant.uniqueName} onChange={onChange} required />\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Address</label>\n                                        <div className=\"control\">\n                                            <input className=\"input\" type=\"text\" placeholder=\"Address input\" name=\"address\" value={tenant.address} onChange={onChange} required />\n                                        </div>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">More Information</label>\n                                        <div className=\"control\">\n                                            <textarea className=\"input\" placeholder=\"More information input\" rows={10} name=\"moreInfo\" value={tenant.moreInfo} onChange={onChange} />\n                                        </div>\n                                    </div>\n                                    <div className=\"select\">\n                                        <select name=\"status\" onChange={onChange} value={tenant.status}>\n                                            <option value=\"notSelected\">Select tenant status</option>\n                                            <option value={TenantStatus.A}>Active</option>\n                                            <option value={TenantStatus.O}>Owing</option>\n                                            <option value={TenantStatus.S}>Suspended</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"field\">\n                                        <label className=\"label\">Date of Registration: {new Date (tenant.dateOfRegistration!).toLocaleDateString(\"en-GB\")}</label>\n                                        <div className=\"control\">\n                                            <input className=\"input\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" max=\"{{todaysDate}}\" placeholder=\"Date of registration\" name=\"dateOfRegistration\" onChange={onChange} />\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"columns is-mobile\">\n                            <div className=\"field is-grouped\">\n                                <div className=\"control\">\n                                    <button className=\"button is-link\">Submit</button>\n                                </div>\n                                <div className=\"control\">\n                                    <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div className=\"column\">\n                <div className=\"columns\">\n                    <form className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Change Primary Contact:</label>\n                                <div className=\"control\">\n                                    <input name=\"primaryEmailAddress\" className=\"input\" type=\"text\" placeholder=\"Enter valid email here\" maxLength={30} value={tenant.primaryContact!.primaryEmailAddress} required />\n                                </div>\n                                <p className=\"help\">The email address should not be more than 30 letters</p>\n                            </div>\n                            <div className=\"control\">\n                                <button onClick={() => { alert('Yet to be implemented'); return false }} className=\"button is-link is-small\">Submit</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div className=\"columns\">\n                    <form className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Change Team Members:</label>\n                                {tenant.teamMembers!.length > 0 ? teamMembers : <div>No team members yet</div>}\n                                <div className=\"control\">\n                                    <button onClick={() => { alert('Yet to be implemented'); return false }} className=\"button is-link is-small\">Add New</button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div className=\"columns\">\n                    <form className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Change Account Officers:</label>\n                                {tenant.tenantAccountOfficers!.length > 0 ? tenantAccountOfficers : <div>No account officers yet</div>}\n                                <div className=\"control\">\n                                    <button onClick={() => { alert('Yet to be implemented'); return false }} className=\"button is-link is-small\">Add New</button>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default EditTenant;\n","/** This component is for displaying each item in the record, passed to it from TenantList */\nimport React, { useContext, useState } from 'react';\nimport { ITenant } from '../app.interfaces';\nimport { AppContext } from '../App';\nimport Alert from './Alert';\n\ntype Props = {\n    tenant: ITenant,\n}\n\ntype IState = {\n    upload: {\n        fileToUpload: Blob | string,\n        uploadButtonState: string\n    }\n    alert: {\n        show: boolean,\n        type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n        onClickHandler?: () => void\n        message: string\n    },\n    logo: {\n        src: string,\n        //cacheClearer: number\n    }\n}\n\nconst ViewTenant: React.FC<Props> = ({ tenant }) => {\n\n    const initialState: IState = {\n        upload: {\n            fileToUpload: \"\",\n            uploadButtonState: \"\"\n        },\n        alert: {\n            show: false,\n            type: undefined,\n            message: \"\"\n        },\n        logo: {\n            src: `/v1/tenants/${tenant.id}/logo`,\n            //cacheClearer: Date.now()\n        }\n    }\n\n    const [state, setState] = useState<IState>({ ...initialState })\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteTenant = () => {\n        appContext!.handleDeleteTenant!(tenant.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditTenant = () => {\n        //appContext!.handleEditTenant!(tenant.id, appContext!.dispatch); //notice here that we are invoking the handleEditTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditTenant', payload: { id: tenant.id } });\n    };\n\n    const onClickCloseButton = () => {\n        appContext!.dispatch({ type: 'HandleCloseViewTenant' })\n    }\n\n    const onChange = (event: any) => {\n        setState({ ...state, upload: { ...state.upload, fileToUpload: event.target.files[0] } })\n    }\n\n    const onSubmit = async (event: React.FormEvent) => {\n        event.preventDefault();\n        const data = new FormData();\n        data.append('file', state.upload.fileToUpload);\n        try {\n            //show loading sign on submit button\n            setState({ ...state, upload: { ...state.upload, uploadButtonState: 'is-loading' } })\n            const response = await fetch(`/v1/tenants/${tenant.id}/logo`,\n                {\n                    method: 'POST',\n                    //don't use below, else you have to have a way to add boundary between multiparts. Let the browser detect and do that automatically\n                    //headers: {\n                    //    'Content-Type': 'multipart/form-data'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                    //},\n                    body: data\n                });\n            if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n            //Response is ok. Proceed!\n            //clear loading sign and fileToUpload. Set browser img src to clear cache\n            setState({ ...state, logo: { ...state.logo, src:`${state.logo.src}?&${Date.now()}`  }, upload: { fileToUpload: '', uploadButtonState: '' } })\n        } catch (error) {\n            setState({ ...state, alert: { show: true, type: 'danger', message: `logo upload failed: ${error.message}` } })\n        }\n    }\n\n    /*Additional handler functions here*/\n    //Below is called by Alert component.\n    const handleCloseAlert = () => {\n        setState({ \n            ...state, alert: { show: false, message: '', type: undefined } \n        });\n    }\n\n    const alert = (\n        <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\n    )\n\n    return (\n        <div className=\"modal modal-full-screen modal-fx-fadeInScale is-active\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">{`Details of ${tenant.uniqueName}`}</p>\n                    <button className=\"delete\" aria-label=\"close\" onClick={onClickCloseButton} />\n                </header>\n                <section className=\"modal-card-body\">\n                    {/*<!-- Content ... -->*/}\n                    <div className=\"columns\">\n                        <div className=\"column is-two-thirds\">\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Address:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.address}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    More Information:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.moreInfo}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Contact firstname:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.primaryContact!.firstName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Contact lastname:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.primaryContact!.lastName}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Contact email:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.primaryContact!.primaryEmailAddress}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Status:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.status}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Active:\n                                </div>\n                                <div className=\"column\">\n                                    {tenant.active ? \"Yes\" : \"No\"}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"column\">\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    Logo\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <img src={`${state.logo.src}`} />\n                                </div>\n                            </div>\n                            <form className=\"columns\" onSubmit={onSubmit}>\n                                <div className=\"field\">\n                                    <label className=\"label\">Upload logo</label>\n                                    <div className=\"control\">\n                                        <input type=\"file\" name=\"file\" onChange={onChange} required/>\n                                    </div>\n                                    <div className=\"field\">\n                                        {state.alert.show && alert}\n                                    </div>\n                                    <div className=\"field control\">\n                                        <button className={`button is-link is-small ${state.upload.uploadButtonState}`} type=\"submit\" >Submit</button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <div className=\"buttons are-small\">\n                        <button className=\"button is-warning\" onClick={onEditTenant}>Edit</button>\n                        <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteTenant() }}>Delete</button>\n                    </div>\n                </footer>\n            </div>\n        </div>\n\n    );\n}\n\nexport default ViewTenant;\n","import React, { useEffect, useReducer } from 'react';\nimport { IAction, IFindOptions, IState } from './app.interfaces';\nimport reducer from './reducers/app.reducer';\n\nimport { handleCreateTenant } from './tenant-crud-handlers/create';\nimport { handleDeleteTenant } from './tenant-crud-handlers/delete';\nimport { handleUpdateTenant } from './tenant-crud-handlers/update';\nimport { handleReadTenants } from './tenant-crud-handlers/read';\nimport Alert from './components/Alert';\nimport TenantList from './components/TenantList';\nimport AddTenant from './components/AddTenant';\nimport EditTenant from './components/EditTenant';\nimport ViewTenant from './components/ViewTenant';\n\n/**\n * Here, we take for granted that on initialization, \n * jwt token string may be sent by the server, if there is valid login\n * To get the userinfo and roles from the token, \n * we can use https://github.com/auth0/jwt-decode\n */\n/*\ntype Props = {\n  jwtToken?: string\n}\n*/\n\n/*Below is type definition for our context type.*/\n//Restricts Context type to null or Object containing functions; null is used only for initialization of context in App.\n//Using Object because we have two or more parameters to pass and we want to carry them together within one context instead of two\n//different ones.\ntype AppContextType = null | { dispatch: React.Dispatch<IAction>, handleDeleteTenant: Function };\n\n//create a context to be used to pass handlers like delete, edit handlers to subcomponents.\n//We are also going to pass dispatch returned by useReducer.\nexport const AppContext = React.createContext<AppContextType>(null);\n\n/*Let us define type for our reducer so that we can easily pass any type of previous state and action.\nReducer is simply a type of function that takes previous state and action and returns a new state as represented\nWe don't have to do this. But it is good to know.*/\ntype Reducer<S, A> = (prevState: S, action: A) => S;\n\nconst App: React.FC<IState> = (props) => {//assuming that props passed will be initial state values\n\n  /*let us organize state, using useReducer*/\n  //Prepare initial state values\n  const initialState: IState =\n  {\n    tenants: props.tenants || [],\n    tenantsCount: props.tenantsCount || 0,\n    tenant: props.tenant || null,\n    onAddTenant: props.onAddTenant || false,\n    onViewTenant: props.onViewTenant || false,\n    onEditTenant: props.onEditTenant || false,\n    alert: props.alert || { show: false, message: '', type: '' }\n  };\n\n  //using useReducer instead of useState\n  const [state, dispatch] = useReducer<Reducer<IState, IAction>>(reducer, initialState);\n\n  /*Additional handler functions here*/\n  //Below is called by Alert component.\n  const handleCloseAlert = () => {\n    dispatch({ type: 'HandleCloseAlert' });\n  }\n\n\n  //Just testing findOptions. Can be used to qualify find.\n  //let findOptions: IFindOptions = {\"select\":[\"id\",\"uniqueName\"], \"order\": {\"uniqueName\": \"ASC\", \"id\": \"DESC\"}}\n  //let findOptions: IFindOptions = {}\n  let findOptions: IFindOptions = {\"relations\":[\"primaryContact\",\"teamMembers\", \"tenantAccountOfficers\", \"customTheme\", \"connectionResource\"]};\n  /**\n   * useEffect to be run once, hence the second parameter []. Loads data at componentDidMount life cycle stage\n   */\n  useEffect(() => {\n    handleReadTenants(dispatch, findOptions);\n    // eslint-disable-next-line\n  }, []);\n\n  /*Time to logically decide what to show.*/\n  //Setup alert component as a variable so we don't keep repeating\n  const myAlert = (\n    <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\n  )\n\n  //check if editTenant should be loaded or not since it is conditional loading\n  if (state.onEditTenant && state.tenant !== null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <EditTenant tenant={state.tenant!} handleUpdateTenant={handleUpdateTenant} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteTenant }}>\n              <TenantList tenants={state.tenants!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onAddTenant) {//Display AddTenant along with TenantList if onAddTenant is true\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AddTenant handleCreateTenant={handleCreateTenant} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteTenant }}>\n              <TenantList tenants={state.tenants!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onViewTenant && state.tenant != null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AppContext.Provider value={{dispatch, handleDeleteTenant }}>\n              <ViewTenant tenant={state.tenant!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else {//onAddTenant is false\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <button className=\"button is-outline\" onClick={() => { dispatch({ type: 'HandleOnAddTenant' }) }}>+ Add Tenant</button>\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteTenant }}>\n              <TenantList tenants={state.tenants!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport { IState } from './app.interfaces';\nimport * as serviceWorker from './serviceWorker';\n\n/* For server side rendering support, we need to use hydrate.\nWe will also get the json data that was written to our server-side template for use here\nOf course, this assumes that we have linked the built js clients to the server side template\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n\nconst initialData = document.getElementById('initial-props')!.getAttribute('data-json')!;\n\n//const initialProps: IState = JSON.parse(initialData? decodeURI(initialData): '');//parse initial data or empty string\n\nconst initialProps: IState = JSON.parse(decodeURI(initialData));//parse initial data or empty string\n\nReactDOM.hydrate(<App {...initialProps}/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}